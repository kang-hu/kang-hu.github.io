"use strict";var app=new Vue({el:"#app",data:{lineURL:"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Johannes_Vermeer_%281632-1675%29_-_The_Girl_With_The_Pearl_Earring_%281665%29.jpg/300px-Johannes_Vermeer_%281632-1675%29_-_The_Girl_With_The_Pearl_Earring_%281665%29.jpg",currentTxt:"",dataURL:"",file:"",resizeImg:"",finalImg:""},props:{},watch:{},computed:{},methods:{useAvatar:function(){oriImg.src=this.lineURL}},created:function(){},mounted:function(){document.getElementById("fileupload").addEventListener("change",readFile)}}),oriImg=document.createElement("img");oriImg.setAttribute("crossOrigin","anonymous");var resizeCanvas=document.createElement("canvas"),resizeCtx=resizeCanvas.getContext("2d"),ori={limit:1e3,limitWidth:1e3,limitHeight:1e3,orientation:1},adjCanvas=document.getElementById("canvas"),adjImage=document.createElement("img"),ctx=adjCanvas.getContext("2d"),diagonal=600,xMove=0,yMove=0,scale=1,lastScale=1,rotation=0,startRotation=0,lastRotation=0;function readFile(){if(this.files&&this.files[0]){var a=new FileReader;a.addEventListener("load",function(a){oriImg.src=a.target.result}),a.readAsDataURL(this.files[0])}else alert("file error")}function resizeImg(){var a,t,e,r=ori.limit;oriImg.naturalWidth>oriImg.naturalHeight?(a=r,t=r*oriImg.naturalHeight/oriImg.naturalWidth,e=r/oriImg.naturalWidth):(a=r,t=r*oriImg.naturalWidth/oriImg.naturalHeight,e=r/oriImg.naturalHeight),resizeCanvas.id="resizeCanvas",resizeCanvas.width=a,resizeCanvas.height=t,resizeCtx.canvas.width=a,resizeCtx.canvas.height=t,resizeCtx.clearRect(0,0,canvas.width,canvas.height),resizeCtx.save(),resizeCtx.scale(e,e),resizeCtx.drawImage(oriImg,0,0),resizeCtx.restore();var i=resizeCanvas.toDataURL();$("#uploadImg").attr("src",i),adjImage.src=i}function draw(){var a=adjImage.naturalWidth,t=adjImage.naturalHeight;ctx.clearRect(0,0,adjCanvas.width,adjCanvas.height),ctx.save(),ctx.translate(diagonal/2+xMove,diagonal/2+yMove),ctx.rotate(rotation*Math.PI/180),ctx.scale(scale,scale),ctx.drawImage(adjImage,-a/2,-t/2),ctx.restore()}oriImg.onload=function(){if(app.currentTxt="- 上傳了一張照片",EXIF.getData(oriImg,function(){ori.orientation=EXIF.getTag(this,"Orientation")}),oriImg.naturalWidth>ori.limitWidth||oriImg.naturalWidth>ori.limitWidth)resizeImg();else{var a=oriImg.src;$("#uploadImg").attr("src",a),adjImage.src=a}},adjImage.setAttribute("crossOrigin","anonymous"),adjImage.onload=function(){var a=adjImage.naturalWidth,t=adjImage.naturalHeight;if(ctx.canvas.width=diagonal,ctx.canvas.height=diagonal,ctx.clearRect(0,0,adjCanvas.width,adjCanvas.height),ctx.save(),rotation=0,6==ori.orientation||8==ori.orientation||3==ori.orientation)switch(ori.orientation){case 3:rotation=180;break;case 6:rotation=90;break;case 8:rotation=-90}ctx.translate(diagonal/2,diagonal/2),ctx.rotate(rotation*Math.PI/180),ctx.drawImage(adjImage,-a/2,-t/2),ctx.restore()};var myElement=document.getElementById("ctrlBox"),mc=new Hammer(myElement);mc.get("pan").set({direction:Hammer.DIRECTION_ALL}),mc.get("rotate").set({enable:!0});var newImage,pinch=new Hammer.Pinch,rotate=new Hammer.Rotate;function generateImage(){var a=canvas.toDataURL();app.file=a,app.currentTxt="- 產生一張照片",newImage=document.getElementById("canvasImg").src=a}pinch.recognizeWith(rotate),mc.add([pinch,rotate]),mc.on("panleft panright panup pandown tap press pinch pinchstart pinchend rotate rotatestart rotateend",function(a){a.preventDefault(),myElement.textContent=a.type+" gesture detected."+a.direction+"scale"+a.scale+"rotation"+a.rotation;var t=10,e=350,r=350;switch(a.type){case"panup":yMove=yMove-t>-r?yMove-t:-r,draw();break;case"panright":xMove=xMove+t<e?xMove+t:e,draw();break;case"pandown":yMove=yMove+t<r?yMove+t:r,draw();break;case"panleft":xMove=xMove-t>-e?xMove-t:-e,draw();break;case"rotatestart":startRotation=a.rotation,lastRotation=rotation;break;case"rotate":var i=startRotation-a.rotation;rotation=lastRotation-i,draw();break;case"rotateend":lastRotation=rotation;break;case"pinchstart":lastScale=scale;break;case"pinch":scale=Math.max(.2,Math.min(lastScale*a.scale,2)),draw(rotation);break;case"pinchend":lastScale=scale}}),$("#generateImage").click(function(){generateImage()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJWdWUiLCJlbCIsImxpbmVVUkwiLCJkYXRhIiwiY3VycmVudFR4dCIsImRhdGFVUkwiLCJmaWxlIiwiZmluYWxJbWciLCJwcm9wcyIsImNvbXB1dGVkIiwidXNlQXZhdGFyIiwidm0iLCJvcmlJbWciLCJzcmMiLCJtb3VudGVkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFkRmlsZSIsInJlc2l6ZUNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJyZXNpemVDdHgiLCJnZXRDb250ZXh0Iiwib3JpIiwibGltaXQiLCJsaW1pdFdpZHRoIiwibGltaXRIZWlnaHQiLCJvcmllbnRhdGlvbiIsImN0eCIsImFkakNhbnZhcyIsImRpYWdvbmFsIiwieE1vdmUiLCJ5TW92ZSIsInNjYWxlIiwibGFzdFNjYWxlIiwibGFzdFJvdGF0aW9uIiwic3RhcnRSb3RhdGlvbiIsIkZSIiwiZmlsZXMiLCJlIiwicmVhZEFzRGF0YVVSTCIsInRhcmdldCIsImFsZXJ0IiwidGhpcyIsInJlc2l6ZUgiLCJyZXNjYWxlIiwicmVzaXplVyIsIm5hdHVyYWxIZWlnaHQiLCJuYXR1cmFsV2lkdGgiLCJoZWlnaHQiLCJ3aWR0aCIsImNhbnZhcyIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsInJlc3RvcmUiLCJyZXNpemVVcmwiLCJ0b0RhdGFVUkwiLCJhZGpJbWFnZSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJFWElGIiwiZ2V0RGF0YSIsImdldFRhZyIsInJlc2l6ZUltZyIsIiQiLCJhdHRyIiwib25sb2FkIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJteUVsZW1lbnQiLCJtYyIsIkhhbW1lciIsImdldCIsInNldCIsImRpcmVjdGlvbiIsIkRJUkVDVElPTl9BTEwiLCJlbmFibGUiLCJuZXdJbWFnZSIsInBpbmNoIiwiUGluY2giLCJyb3RhdGUiLCJSb3RhdGUiLCJjbGljayIsImdlbmVyYXRlSW1hZ2UiLCJyZWNvZ25pemVXaXRoIiwiYWRkIiwib24iLCJldiIsIm1vdmVEaXN0YW5jZSIsInR5cGUiLCJ5Qm91bmRhcnkiLCJtaW5TY2FsZSIsIm1heFNjYWxlIiwiZHJhdyIsInhCb3VuZGFyeSIsImRpZmYiLCJtYXgiLCJtaW4iXSwibWFwcGluZ3MiOiJhQUFBLElBQUlBLElBQU0sSUFBSUMsS0FDVkMsR0FBSSxPQURKRixNQUNJRyxRQURVLHNPQUVkQyxXQUFNLEdBQ0ZELFFBQVMsR0FDVEUsS0FBQUEsR0FDQUMsVUFIRSxHQUlGQyxTQUpFLElBTUZDLFNBRUpDLFNBSUFDLFlBR0lDLFNBQ0lBLFVBQUlDLFdBRVBDLE9BQUFDLElBRFVBLEtBQ1ZYLFVBSUxZLFFBQVMsYUFFTEMsUUFBQUEsV0ExQlJBLFNBQUFDLGVBQUEsY0FBQUMsaUJBQUEsU0FBQUMsYUF5Q0lDLE9BQUFBLFNBQWVKLGNBQVNLLE9BQzVCUixPQUFJUyxhQUFZRixjQUFhRyxhQUM3QixJQUFJQyxhQUFNUixTQUFBSyxjQUFBLFVBQ05JLFVBRE1MLGFBQUFHLFdBQUEsTUFFTkcsS0FDQUMsTUFBQUEsSUFDQUMsV0FBQUEsSUFDQUQsWUFBQSxJQURBQyxZQUFhLEdBWWJDLFVBQU1DLFNBQVVQLGVBQXBCLFVBQ0lRLFNBQVdmLFNBQWZLLGNBQUEsT0FESVEsSUFBTUMsVUFBVVAsV0FBVyxNQUcvQlEsU0FBQSxJQUNJQyxNQUFRLEVBR1pDLE1BQUEsRUFDSUMsTUFBUSxFQUdaQyxVQUFBLEVBR0lDLFNBQUFBLEVBREFDLGNBQWdCLEVBR3BCRCxhQUFBLEVBR0ksU0FBQWpCLFdBR0ltQixHQUFBQSxLQUFHcEIsT0FBQUEsS0FBSHFCLE1BQW9CLEdBQVEsQ0FDeEIxQixJQUFBQSxFQUFBQSxJQUFPQyxXQUNWd0IsRUFGRHBCLGlCQUFBLE9BQUEsU0FBQXNCLEdBR0dDLE9BQUFBLElBQWVELEVBQUFFLE9BQUtILFNBRXZCSSxFQUFBQSxjQUFBQyxLQUFBTCxNQUFBLFNBRVBJLE1BQUEsY0F3QkcsU0FBSUUsWUFDSixJQUFJcEIsRUFDQXFCLEVB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QUFBLFdBQ0pBLFVBQUFELFNBdUNSK0IsRUFBRSxrQkFBa0JtQixNQUFNLFdBQ3RCQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gbmV3IFZ1ZSh7XHJcbiAgICBlbDogJyNhcHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIGxpbmVVUkw6IFwiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi82LzY2L0pvaGFubmVzX1Zlcm1lZXJfJTI4MTYzMi0xNjc1JTI5Xy1fVGhlX0dpcmxfV2l0aF9UaGVfUGVhcmxfRWFycmluZ18lMjgxNjY1JTI5LmpwZy8zMDBweC1Kb2hhbm5lc19WZXJtZWVyXyUyODE2MzItMTY3NSUyOV8tX1RoZV9HaXJsX1dpdGhfVGhlX1BlYXJsX0VhcnJpbmdfJTI4MTY2NSUyOS5qcGdcIixcclxuICAgICAgICBjdXJyZW50VHh0OiBcIlwiLFxyXG4gICAgICAgIGRhdGFVUkw6IFwiXCIsXHJcbiAgICAgICAgZmlsZTogXCJcIixcclxuICAgICAgICByZXNpemVJbWc6IFwiXCIsXHJcbiAgICAgICAgZmluYWxJbWc6IFwiXCIsXHJcbiAgICB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgIH0sXHJcbiAgICB3YXRjaDoge1xyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHVzZUF2YXRhcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgICAgIG9yaUltZy5zcmMgPSB2bS5saW5lVVJMO1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlsZXVwbG9hZFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHJlYWRGaWxlKTtcclxuICAgIH0gICBcclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogdXBsb2FkIEltYWdlXHJcbiAqIOS4iuWCs+aqlOahiOaqouafpeWclueJh+aqlOahiOWkp+Wwj1xyXG4gKiDkuIrlgrPmqpTmoYjooqvovInlhaXlvoxcclxuICogIFxyXG4gKi9cclxuXHJcbi8vIOS4iuWCs+WclkNvbmZpZ1xyXG52YXIgb3JpSW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxub3JpSW1nLnNldEF0dHJpYnV0ZSgnY3Jvc3NPcmlnaW4nLCAnYW5vbnltb3VzJyk7XHJcbnZhciByZXNpemVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxudmFyIHJlc2l6ZUN0eCA9IHJlc2l6ZUNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbnZhciBvcmkgPSB7XHJcbiAgICBsaW1pdDogMTAwMCxcclxuICAgIGxpbWl0V2lkdGg6IDEwMDAsXHJcbiAgICBsaW1pdEhlaWdodDogMTAwMCxcclxuICAgIG9yaWVudGF0aW9uOiAxLFxyXG4gICAgLy/ljp/lp4vlnJbpmZDliLblr6zpq5jpgornlYxcclxufVxyXG5cclxuLypcclxuICpcclxuICogQ2FudmFzIOS9jeenu+OAgeaXi+i9ieOAgee4ruaUvlxyXG4gKlxyXG4gKi9cclxuXHJcbnZhciBhZGpDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxudmFyIGFkakltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxudmFyIGN0eCA9IGFkakNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbnZhciBkaWFnb25hbCA9IDYwMDtcclxuXHJcbi8vIOawtOW5syDlnoLnm7Qg5Lit5b+D6bue56e75YuVXHJcbnZhciB4TW92ZSA9IDAsXHJcbiAgICB5TW92ZSA9IDA7XHJcblxyXG4vLyBTY2FsZVxyXG52YXIgc2NhbGUgPSAxLCBcclxuICAgIGxhc3RTY2FsZSA9MTtcclxuXHJcbi8vIFJvdGF0ZVxyXG52YXIgcm90YXRpb24gPSAwO1xyXG52YXIgc3RhcnRSb3RhdGlvbiA9IDA7XHJcbnZhciBsYXN0Um90YXRpb24gPSAwO1xyXG5cclxuLy8gKiDoroDlj5bkuIrlgrPmqpTmoYhcclxuZnVuY3Rpb24gcmVhZEZpbGUoKSB7XHJcbiAgICAvLy8gY2hlY2sgaW1hZ2Ugc2l6ZSBhbmQgcmVzaXplO1xyXG4gICAgLy8vIHNldCBvcmlJbWcuc3JjXHJcbiAgICBpZiAodGhpcy5maWxlcyAmJiB0aGlzLmZpbGVzWzBdKSB7XHJcbiAgICAgICAgdmFyIEZSPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgIEZSLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgb3JpSW1nLnNyYyA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICB9KTsgXHJcbiAgICAgICAgRlIucmVhZEFzRGF0YVVSTCggdGhpcy5maWxlc1swXSApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydCgnZmlsZSBlcnJvcicpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vICog5Y6f5aeL5ZyW6KKr6LyJ5YWlXHJcbm9yaUltZy5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgIGFwcC5jdXJyZW50VHh0ID0gJy0g5LiK5YKz5LqG5LiA5by154Wn54mHJzsgXHJcbiAgICBFWElGLmdldERhdGEob3JpSW1nLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIG9yaS5vcmllbnRhdGlvbiA9IEVYSUYuZ2V0VGFnKHRoaXMsICdPcmllbnRhdGlvbicpXHJcbiAgICB9KTtcclxuICAgIC8vIGFsZXJ0KEVYSUYuZ2V0VGFnKHRoaXMsICdPcmllbnRhdGlvbicpKTtcclxuXHJcbiAgICBpZihvcmlJbWcubmF0dXJhbFdpZHRoPm9yaS5saW1pdFdpZHRofHxvcmlJbWcubmF0dXJhbFdpZHRoPm9yaS5saW1pdFdpZHRoKSB7XHJcbiAgICAgICAgcmVzaXplSW1nKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciByZXNpemVVcmwgPSBvcmlJbWcuc3JjO1xyXG5cclxuICAgICAgICAkKCcjdXBsb2FkSW1nJykuYXR0cihcInNyY1wiLCByZXNpemVVcmwpXHJcbiAgICAgICAgYWRqSW1hZ2Uuc3JjID0gcmVzaXplVXJsO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyAqIHJlc2l6ZSBvcmlJbWdcclxuZnVuY3Rpb24gcmVzaXplSW1nKCkge1xyXG4gICAgdmFyIHJlc2l6ZVc7XHJcbiAgICB2YXIgcmVzaXplSDtcclxuICAgIHZhciBsaW1pdCA9IG9yaS5saW1pdDtcclxuICAgIHZhciByZXNjYWxlO1xyXG5cclxuICAgIGlmKG9yaUltZy5uYXR1cmFsV2lkdGggPiBvcmlJbWcubmF0dXJhbEhlaWdodCkge1xyXG4gICAgICAgIC8v5a+s5aSn5pa86auYXHJcbiAgICAgICAgcmVzaXplVyA9IGxpbWl0O1xyXG4gICAgICAgIHJlc2l6ZUggPSAobGltaXQqb3JpSW1nLm5hdHVyYWxIZWlnaHQpL29yaUltZy5uYXR1cmFsV2lkdGhcclxuICAgICAgICByZXNjYWxlID0gbGltaXQvb3JpSW1nLm5hdHVyYWxXaWR0aDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy/pq5jlpKfmlrzlr6xcclxuICAgICAgICByZXNpemVXID0gbGltaXQ7XHJcbiAgICAgICAgcmVzaXplSCA9IChsaW1pdCpvcmlJbWcubmF0dXJhbFdpZHRoKS9vcmlJbWcubmF0dXJhbEhlaWdodFxyXG4gICAgICAgIHJlc2NhbGUgPSBsaW1pdC9vcmlJbWcubmF0dXJhbEhlaWdodDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJlc2l6ZUNhbnZhcy5pZCA9IFwicmVzaXplQ2FudmFzXCI7XHJcbiAgICAgICAgcmVzaXplQ2FudmFzLndpZHRoID0gcmVzaXplVztcclxuICAgICAgICByZXNpemVDYW52YXMuaGVpZ2h0ID0gcmVzaXplSDtcclxuXHJcbiAgICAgICAgcmVzaXplQ3R4LmNhbnZhcy53aWR0aCA9IHJlc2l6ZVc7XHJcbiAgICAgICAgcmVzaXplQ3R4LmNhbnZhcy5oZWlnaHQgPSByZXNpemVIO1xyXG5cclxuICAgICAgICByZXNpemVDdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgcmVzaXplQ3R4LnNhdmUoKTtcclxuICAgICAgICByZXNpemVDdHguc2NhbGUocmVzY2FsZSxyZXNjYWxlKTtcclxuICAgICAgICByZXNpemVDdHguZHJhd0ltYWdlKG9yaUltZywwLDApO1xyXG4gICAgICAgIHJlc2l6ZUN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgdmFyIHJlc2l6ZVVybCA9IHJlc2l6ZUNhbnZhcy50b0RhdGFVUkwoKTtcclxuICAgICQoJyN1cGxvYWRJbWcnKS5hdHRyKFwic3JjXCIsIHJlc2l6ZVVybClcclxuXHJcbiAgICBhZGpJbWFnZS5zcmMgPSByZXNpemVVcmw7XHJcblxyXG4gICAgLy8gdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XHJcbiAgICAvLyB2YXIgdXBsb2FkZmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ1cGxvYWRJbWdcIilbMF07XHJcbiAgICAvLyB1cGxvYWRmaWxlLmFwcGVuZENoaWxkKHJlc2l6ZUNhbnZhcyk7XHJcbn1cclxuXHJcbmFkakltYWdlLnNldEF0dHJpYnV0ZSgnY3Jvc3NPcmlnaW4nLCAnYW5vbnltb3VzJyk7XHJcblxyXG5hZGpJbWFnZS5vbmxvYWQ9ZnVuY3Rpb24oKXtcclxuICAgIHZhciB3aWR0aCA9IGFkakltYWdlLm5hdHVyYWxXaWR0aDtcclxuICAgIHZhciBoZWlnaHQgPSBhZGpJbWFnZS5uYXR1cmFsSGVpZ2h0O1xyXG4gICAgY3R4LmNhbnZhcy53aWR0aCA9IGRpYWdvbmFsO1xyXG4gICAgY3R4LmNhbnZhcy5oZWlnaHQgPSBkaWFnb25hbDtcclxuXHJcbiAgICBjdHguY2xlYXJSZWN0KDAsMCxhZGpDYW52YXMud2lkdGgsYWRqQ2FudmFzLmhlaWdodCk7XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgLy8v57mq5Ye655qE5pa55byPIOenu+WLleS4reW/g+m7niDlho3lm57mi4nlnJbmnKzouqvlr6zpq5hcclxuICAgIHJvdGF0aW9uID0gMDtcclxuICAgIGlmKG9yaS5vcmllbnRhdGlvbiA9PSA2IHx8IG9yaS5vcmllbnRhdGlvbiA9PSA4fHwgb3JpLm9yaWVudGF0aW9uID09IDMpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgc3dpdGNoKG9yaS5vcmllbnRhdGlvbil7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gMTgwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gOTA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSAtOTA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3R4LnRyYW5zbGF0ZShkaWFnb25hbC8yLGRpYWdvbmFsLzIpO1xyXG4gICAgY3R4LnJvdGF0ZShyb3RhdGlvbipNYXRoLlBJLzE4MCk7XHJcbiAgICBjdHguZHJhd0ltYWdlKGFkakltYWdlLC13aWR0aC8yLC1oZWlnaHQvMik7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3KCl7XHJcbiAgICB2YXIgd2lkdGggPSBhZGpJbWFnZS5uYXR1cmFsV2lkdGg7XHJcbiAgICB2YXIgaGVpZ2h0ID0gYWRqSW1hZ2UubmF0dXJhbEhlaWdodDtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwwLGFkakNhbnZhcy53aWR0aCxhZGpDYW52YXMuaGVpZ2h0KTtcclxuICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgY3R4LnRyYW5zbGF0ZShkaWFnb25hbC8yK3hNb3ZlLGRpYWdvbmFsLzIreU1vdmUpO1xyXG4gICAgY3R4LnJvdGF0ZShyb3RhdGlvbipNYXRoLlBJLzE4MCk7XHJcbiAgICBjdHguc2NhbGUoc2NhbGUsc2NhbGUpO1xyXG4gICAgY3R4LmRyYXdJbWFnZShhZGpJbWFnZSwtd2lkdGgvMiwtaGVpZ2h0LzIpO1xyXG5cclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBIYW1tZXIuanMgZGV0ZWN0XHJcbiAqXHJcbiAqL1xyXG5cclxuLy8vIGNyZWF0ZSBhIHNpbXBsZSBpbnN0YW5jZVxyXG4vLy8gYnkgZGVmYXVsdCwgaXQgb25seSBhZGRzIGhvcml6b250YWwgcmVjb2duaXplcnNcclxudmFyIG15RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdHJsQm94Jyk7XHJcbnZhciBtYyA9IG5ldyBIYW1tZXIobXlFbGVtZW50KTtcclxuXHJcbi8vLyBsZXQgdGhlIHBhbiBnZXN0dXJlIHN1cHBvcnQgYWxsIGRpcmVjdGlvbnMuXHJcbi8vLyB0aGlzIHdpbGwgYmxvY2sgdGhlIHZlcnRpY2FsIHNjcm9sbGluZyBvbiBhIHRvdWNoLWRldmljZSB3aGlsZSBvbiB0aGUgZWxlbWVudFxyXG5tYy5nZXQoJ3BhbicpLnNldCh7IGRpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9BTEwgfSk7XHJcbm1jLmdldCgncm90YXRlJykuc2V0KHsgZW5hYmxlOiB0cnVlIH0pO1xyXG5cclxuLy8vIGNyZWF0ZSBhIHBpbmNoIGFuZCByb3RhdGUgcmVjb2duaXplclxyXG4vLy8gdGhlc2UgcmVxdWlyZSAyIHBvaW50ZXJzXHJcbnZhciBwaW5jaCA9IG5ldyBIYW1tZXIuUGluY2goKTtcclxudmFyIHJvdGF0ZSA9IG5ldyBIYW1tZXIuUm90YXRlKCk7XHJcblxyXG4vLy8gd2Ugd2FudCB0byBkZXRlY3QgYm90aCB0aGUgc2FtZSB0aW1lXHJcbnBpbmNoLnJlY29nbml6ZVdpdGgocm90YXRlKTtcclxuLy8vIGFkZCB0byB0aGUgTWFuYWdlclxyXG5tYy5hZGQoW3BpbmNoLCByb3RhdGVdKTtcclxuXHJcbi8vIGxpc3RlbiB0byBldmVudHMuLi5cclxubWMub24oXCJwYW5sZWZ0IHBhbnJpZ2h0IHBhbnVwIHBhbmRvd24gdGFwIHByZXNzIHBpbmNoIHBpbmNoc3RhcnQgcGluY2hlbmQgcm90YXRlIHJvdGF0ZXN0YXJ0IHJvdGF0ZWVuZFwiLCBmdW5jdGlvbihldikge1xyXG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBteUVsZW1lbnQudGV4dENvbnRlbnQgPSBldi50eXBlICtcIiBnZXN0dXJlIGRldGVjdGVkLlwiK2V2LmRpcmVjdGlvbitcInNjYWxlXCIrZXYuc2NhbGUrXCJyb3RhdGlvblwiK2V2LnJvdGF0aW9uO1xyXG4gICAgXHJcbiAgICB2YXIgbW92ZURpc3RhbmNlID0gMTA7XHJcbiAgICB2YXIgeEJvdW5kYXJ5ID0gMzUwO1xyXG4gICAgdmFyIHlCb3VuZGFyeSA9IDM1MDtcclxuICAgIHZhciBtaW5TY2FsZSA9IDAuMjtcclxuICAgIHZhciBtYXhTY2FsZSA9IDI7XHJcblxyXG4gICAgc3dpdGNoKCBldi50eXBlICkge1xyXG4gICAgICAgIGNhc2UgJ3BhbnVwJzpcclxuICAgICAgICAgICAgeU1vdmUgPSB5TW92ZS1tb3ZlRGlzdGFuY2U+LXlCb3VuZGFyeT95TW92ZS1tb3ZlRGlzdGFuY2U6LXlCb3VuZGFyeTtcclxuICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwYW5yaWdodCc6XHJcbiAgICAgICAgICAgIHhNb3ZlID0geE1vdmUrbW92ZURpc3RhbmNlPHhCb3VuZGFyeT94TW92ZSttb3ZlRGlzdGFuY2U6eEJvdW5kYXJ5O1xyXG4gICAgICAgICAgICBkcmF3KCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3BhbmRvd24nOlxyXG4gICAgICAgICAgICB5TW92ZSA9IHlNb3ZlK21vdmVEaXN0YW5jZTx5Qm91bmRhcnk/eU1vdmUrbW92ZURpc3RhbmNlOnlCb3VuZGFyeTtcclxuICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwYW5sZWZ0JzpcclxuICAgICAgICAgICAgeE1vdmUgPSB4TW92ZS1tb3ZlRGlzdGFuY2U+LXhCb3VuZGFyeT94TW92ZS1tb3ZlRGlzdGFuY2U6LXhCb3VuZGFyeTtcclxuICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyb3RhdGVzdGFydCc6XHJcbiAgICAgICAgICAgIHN0YXJ0Um90YXRpb24gPSBldi5yb3RhdGlvbjtcclxuICAgICAgICAgICAgbGFzdFJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JvdGF0ZSc6XHJcbiAgICAgICAgICAgIHZhciBkaWZmID0gc3RhcnRSb3RhdGlvbiAtIGV2LnJvdGF0aW9uO1xyXG4gICAgICAgICAgICByb3RhdGlvbiA9IGxhc3RSb3RhdGlvbiAtIGRpZmY7XHJcbiAgICAgICAgICAgIGRyYXcoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncm90YXRlZW5kJzpcclxuICAgICAgICAgICAgbGFzdFJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3BpbmNoc3RhcnQnOlxyXG4gICAgICAgICAgICBsYXN0U2NhbGUgPSBzY2FsZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncGluY2gnOlxyXG4gICAgICAgICAgICBzY2FsZSA9IE1hdGgubWF4KG1pblNjYWxlLCBNYXRoLm1pbihsYXN0U2NhbGUgKiBldi5zY2FsZSwgbWF4U2NhbGUpKTtcclxuICAgICAgICAgICAgZHJhdyhyb3RhdGlvbik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3BpbmNoZW5kJzpcclxuICAgICAgICAgICAgbGFzdFNjYWxlID0gc2NhbGU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQgOlxyXG4gICAgfVxyXG5cclxuICAgIC8qIFxyXG4gICAgICAgIOaTjeS9nGhhbW1lcitDYW52YXMgUm90YXRlIFNjYWxl5b+D5b6XOlxyXG5cclxuICAgICAgICAtIFBpbmNo54uA5oWL5YiG5LiJ56iu6aGe5Z6LOiBbcGluY2ggcGluY2hzdGFydCBwaW5jaGVuZF1cclxuICAgICAgICAgICAgcGluY2hzdGFydDogbGFzdFNjYWxlIOabtOaWsOaIkOePvuWcqOeahCBzY2FsZVxyXG4gICAgICAgICAgICBwaW5jaDpcclxuICAgICAgICAgICAgcGluY2hlbmQ6IGxhc3RTY2FsZSDmm7TmlrDmiJDnj77lnKjnmoQgc2NhbGVcclxuXHJcbiAgICAgICAgLSBSb3RhdGXni4DmhYvliIbkuInnqK7poZ7lnos6IFtyb3RhdGVzdGFydCByb3RhdGUgcm90YXRlZW5kXVxyXG4gICAgICAgICAgICByb3RhdGVzdGFydDpcclxuICAgICAgICAgICAgICAgIHN0YXJ0Um90YXRpb27mm7TmlrDmiJDmhJ/mh4nnmoRyb3RhdGlvbuinkuW6plxyXG4gICAgICAgICAgICAgICAgbGFzdFJvdGF0aW9u5pu05paw5oiQ54++5Zyo55qEUm90YXRpb25cclxuICAgICAgICAgICAgcm90YXRlOlxyXG4gICAgICAgICAgICAgICAg5peL6L2J5beuIDogSEFNTUVSLXJvdGF0ZXN0YXJ055qEcm90YXRpb24gLSBIQU1NRVItcm90YXRl55qEcm90YXRpb25cclxuICAgICAgICAgICAgICAgIOaXi+i9ieinkuW6piA6IOacgOW+jOeahOinkuW6piAtIOaXi+i9ieW3rlxyXG4gICAgICAgICAgICByb3RhdGVlbmQ6IGxhc3RSb3RhdGlvbuabtOaWsOaIkOePvuWcqOeahFJvdGF0aW9uICAgXHJcbiAgICAqL1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBDYW52YXMgdG8gaW1nXHJcbiAqXHJcbiAqL1xyXG5cclxudmFyIG5ld0ltYWdlO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUltYWdlKCkge1xyXG4gICAgLy8vIHNhdmUgY2FudmFzIGltYWdlIGFzIGRhdGEgdXJsIChwbmcgZm9ybWF0IGJ5IGRlZmF1bHQpXHJcbiAgICAvLy8gc2V0IGNhbnZhc0ltZyBpbWFnZSBzcmMgdG8gZGF0YVVSTFxyXG4gICAgLy8vIHNvIGl0IGNhbiBiZSBzYXZlZCBhcyBhbiBpbWFnZVxyXG4gICAgdmFyIGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICBhcHAuZmlsZSA9IGRhdGFVUkw7XHJcbiAgICBhcHAuY3VycmVudFR4dCA9ICctIOeUoueUn+S4gOW8teeFp+eJhyc7IFxyXG4gICAgbmV3SW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzSW1nJykuc3JjID0gZGF0YVVSTDsgICAgXHJcbn1cclxuXHJcbiQoXCIjZ2VuZXJhdGVJbWFnZVwiKS5jbGljayhmdW5jdGlvbigpeyBcclxuICAgIGdlbmVyYXRlSW1hZ2UoKTtcclxufSk7XHJcbiJdfQ==
